##服务名
spring.application.name=user-customer
##端口号
server.port=9030
##注册中心
eureka.client.service-url.defaultZone=http://localhost:8080/eureka/


##连接超时时间
#ribbon.ConnectTimeout=1000
###业务处理超时时间
#ribbon.ReadTimeout=1000
###同一台实例最大重试次数,不包括首次调用
#ribbon.MaxAutoRetried=2
###重试负载均衡其他的实例最大重试次数,不包括首次调用
#ribbon.MaxAutoRetriesNextServer=2
###是否所有操作都重试
#ribbon.OkToRetryOnAllOperations=false


##feign整合hystrix
#feign.hystrix.enabled=true


##隔离策略，默认是Thread, 可选Thread｜Semaphore
##thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用
##semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求
#hystrix.command.default.execution.isolation.strategy=SEMAPHORE
##命令执行超时时间，默认1000ms
##hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds
##执行是否启用超时，默认启用true
##hystrix.command.default.execution.timeout.enabled
##发生超时是是否中断，默认true
##hystrix.command.default.execution.isolation.thread.interruptOnTimeout
##最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。
##如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，
##但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。
##semaphore应该占整个容器（tomcat）的线程池的一小部分。
#hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests=10
##健康上报  http://localhost:9030/actuator/hystrix.stream
##健康上报图形化  http://localhost:9030/hystrix



##zipkin 监控
spring.zipkin.base-url=http://localhost:9411/
##采样比例
spring.sleuth.sampler.rate=1

##Admin健康检查
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
spring.boot.admin.client.url=http://localhost:9080